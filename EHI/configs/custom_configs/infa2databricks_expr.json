{
	"line_subst" : [
		//datetime formats for date manipulation functions
		{"from" : "\bSYSDATE\b", "to" : "CURRENT_TIMESTAMP"},
		{"from" : "SYSTIMESTAMP", "to" : "CURRENT_TIMESTAMP"},
		{"from" : "\bIN\s*\(", "to" : "FUNCTION_IN ("},
		//{"from" : "(.*)\s\|\|\s(.*)\b", "to" : "concat($1,$2)"},
		//casting.  This is tied into converting datatypes for conforming nodes statement category must be specified as DATATYPE_CASTING for BB aws glue writer
		{"from" : "\(nolock\)", "to" : ""},
		{"from" : "numeric\(10\)", "to" : "integer", "statement_categories" : ["DATATYPE_CASTING"]},
		{"from" : "timestamp\(\d+,\d+\)", "to" : "timestamp", "statement_categories" : ["DATATYPE_CASTING"]},
		{"from" : "'\s*,\s*([0-9]+)", "to" : "','$1'"}, // in case we have IN ('a','b',123). dbks will fail casting the numeric into string
		{"from" : "'YYYYMMDD'", "to" : "'yyyyMMdd'", "case_sensitive_match" : "1"},
		{"from" : "'YYYYMM'", "to" : "'yyyyMM'", "case_sensitive_match" : "1"},
		{"from" : "NOT\s+ISNULL", "to" : "NOT_ISNULL"}, //trick into 'creating a function call NOT_ISNULL
//		{"from" : "\w+\.(\w+)", "to" : "$1"} // Enable to remove dataframe in dataframe.col in selectExpr() calls
		
		//update strategy - assign numeric values.
		{"from" : "DD_INSERT", "to" : "0"},
		{"from" : "DD_UPDATE", "to" : "1"},
		{"from" : "DD_DELETE", "to" : "2"},
		{"from" : "DD_REJECT", "to" : "3"}
	],
	"operator_to_function_subst" : { //converting operators to functions
		"||" : "concat"
	},
	"block_subst" : [], //needed, at least an empty one
	"function_subst" : [
		{"from" : "FUNCTION_IN", "output_template" : "$1 IN ( $ARGS_AFTER_1ST_ARG )"},
		{"from" : "TO_INTEGER", "output_template" : "cast($1 as int)"},
		{"from" : "ADD_TO_DATE", "to" : "DATE_ADD", "arg_placement" : { "1":"3", "2":"1" }},
		{"from" : "DATE_DIFF", "output_template" : "DATEDIFF($1, $2)", "arg_pattern" : {"3" : "D"}},
		{"from" : "DATE_DIFF", "output_template" : "MONTHS_BETWEEN($1, $2)", "arg_pattern" : {"3" : "(MM|MON)"}},
		{"from" : "DATE_DIFF", "output_template" : "YEAR($1) - YEAR($2)", "arg_pattern" : {"3" : "Y"}},
		{"from" : "DATE_DIFF", "output_template" : "(unix_timestamp($1) - unix_timestamp($2)) / 60", "arg_pattern" : {"3" : "HH"}},
		{"from" : "IS_SPACES", "output_template" : "TRIM($1) = ''"}, // convert IS_SPACES into a comparison of a trimmed string to blank string
		{"from" : "LTRIM", "to" : "LTRIM", "arg_placement" : { "1":"2", "2":"1" }, "num_args" : "2"},
		{"from" : "RTRIM", "to" : "RTRIM", "arg_placement" : { "1":"2", "2":"1" }, "num_args" : "2"},
		{"from": "TO_CHAR", "to" : "date_format"},
		{"from" : "TO_DECIMAL", "to" : "DECIMAL"},
		{"from" : "TO_INTEGER", "to" : "INTEGER"},
		{"from" : "TO_BIGINT", "to" : "BIGINT"},
		{"from" : "LENGTH", "to" : "CHARACTER_LENGTH"},
		{"from" : "LAST", "to" : "LAST_VALUE"},
		{"from" : "FIRST", "to" : "FIRST_VALUE"},
		{"from" : "ERROR", "to" : "RAISE_ERROR"},
		{"from" : "NOT_ISNULL", "output_template" : "$1 IS NOT NULL"},
		{"from" : "ISNULL", "output_template" : "$1 IS NULL"},
		//{"from" : "IIF", "output_template" : "CASE WHEN $1 THEN $2 ELSE $3 END"}, // specify template, instead of swapping arguments or replacing the function call
//		{"from" : "IIF", "to" : "IFF"},
		{"from" : "IIF", "output_template" : "IF ($1, $2, NULL)", "num_args" : "2"},
		{"from" : "IIF", "output_template" : "IF ($1, $2, $3)", "num_args" : "3"},
		{"from" : "IS_NUMBER", "output_template" : "cast($1 as double) IS NOT NULL"},
		{"from" : "DATE_COMPARE", "output_template" :  "cast(regexp_replace($1, \"-\", \"\") as int) > cast(regexp_replace($2, \"-\", \"\") as int)"},
		{"from" : "MAKE_DATE_TIME", "output_template" :  "cast($1+\"-\"+$2+\"-\"+$3+\" \"+$4+\":\"+$5+\":\"+$6 as timestamp)", "num_args" : "6"},
		{"from" : "MAKE_DATE_TIME", "output_template" :  "cast($1+\"-\"+$2+\"-\"+$3+\" \"+$4+\":\"+$5+\":\"+$6+\".\"+$7 as timestamp)", "num_args" : "7"},
		{"from" : "SETVARIABLE", "output_template" : "SET $1 = $2"},
		{"from" : "REG_REPLACE", "output_template" : "REGEXP_REPLACE($1,$2,$3)","num_args" : "3"},
		{"from" : "REPLACECHR", "output_template" : "REPLACE ( $2,$3,$4 )","arg_pattern" : {"1" : "0"}, "num_args" : "4"},
		{"from" : "REPLACECHR", "output_template" : "REPLACE_MULTISTRING($ARGS_AFTER_1ST_ARG)"}, //convert to a dummy function removing the 1st arg
		{"from" : "REPLACESTR", "output_template" : "REPLACE($2,$3,$4)","arg_pattern" : {"1" : "0"}, "num_args" : "4"},
		{"from" : "REPLACESTR", "output_template" : "REPLACE_MULTISTRING($ARGS_AFTER_1ST_ARG)"}, //convert to a dummy function removing the 1st arg
		{"from" : "REPLACE_MULTISTRING", "output_template" : "REGEXP_REPLACE($1, '(' || $ARGS_AFTER_1ST_ARG_EXCLUDING_LAST_ARG || ')', $LAST_ARG )", "new_arg_separator" : " || '|' ||", "each_arg_routine" : "::escape_regex_arg"},
		{"from" : "REG_MATCH", "output_template" : "$1 RLIKE $2"},
		{"from" : "REG_EXTRACT", "output_template" : "REGEXP_EXTRACT(SUBSTRING($1 FROM $4), $2, $3)"},
		{"from" : "SETMAXVARIABLE", "output_template" : "SET $1 = GREATEST($1, $2)"}
		//{"from" : "CONCAT", "output_template" : "CONCAT_WS('',$1,$ARGS_AFTER_1ST_ARG_EXCLUDING_LAST_ARG, $LAST_ARG )", "each_arg_routine" : "::convert_concat"} //escape_regex_arg mimic
		//from" : "\$\$(\w+)", "to"	:"{$1}"},
		//{"from" : "\$(\w+)", "to"	:"{$1}"}
	]
}

// this is a loadable code
/*LOADABLE_CODE
use strict;
# check if the arg is a string and add backslash in front of the chars *()[]
sub main::escape_regex_arg
{
	my $str = shift;
	return $str unless $str =~ /^'.*'$/; #return unless arg is a quote-enclosed string
	$str =~ s/\*/\\\*/gis;
	$str =~ s/\(/\\\(/gis;
	$str =~ s/\)/\\\)/gis;
	$str =~ s/\[/\\\[/gis;
	$str =~ s/\]/\\\]/gis;
	return $str;
}

# check if the arg is a string and add backslash in front of the chars *()[]
sub main::convert_concat
{
	my $arg = shift;
	$arg =~ s/\bCONCAT\b\((.*?)\)/CONCAT_WS(''$1)/gis;
	return $arg;
}

LOADABLE_CODE*/
